DELIMITER //
CREATE PROCEDURE transfer_money(
    IN from_account VARCHAR(20),
    IN to_account VARCHAR(20),
    IN amount DECIMAL(15, 2),
    OUT message VARCHAR(100)
)
BEGIN
    DECLARE current_balance DECIMAL(15, 2);
    DECLARE rows_affected INT;
    DECLARE transfer_status BOOLEAN DEFAULT FALSE;
    
    -- 변수 초기화
    SET transfer_status = FALSE;
    
    -- 트랜잭션 시작
    START TRANSACTION;
    
    -- 출금 계좌 존재 및 잔고 확인
    SELECT balance INTO current_balance 
    FROM hana_bank 
    WHERE account_number = from_account
    FOR UPDATE;  -- 행 잠금
    
    -- 출금 계좌가 존재하고 잔고가 충분한지 확인
    IF found_rows() > 0 AND current_balance >= amount THEN
        -- 출금 계좌에서 금액 차감
        UPDATE hana_bank
        SET balance = balance - amount
        WHERE account_number = from_account;
        
        SET rows_affected = ROW_COUNT();
        
        -- 출금이 성공했는지 확인
        IF rows_affected > 0 THEN
            -- 입금 계좌 확인
            SELECT COUNT(*) INTO rows_affected
            FROM woori_bank
            WHERE account_number = to_account
            FOR UPDATE;  -- 행 잠금
            
            -- 입금 계좌가 존재하는지 확인
            IF rows_affected > 0 THEN
                -- 입금 계좌에 금액 추가
                UPDATE woori_bank
                SET balance = balance + amount
                WHERE account_number = to_account;
                
                SET rows_affected = ROW_COUNT();
                
                -- 입금이 성공했는지 확인
                IF rows_affected > 0 THEN
                    SET transfer_status = TRUE;
                END IF;
            END IF;
        END IF;
    END IF;
    
    -- 트랜잭션 완료 (성공 또는 실패)
    IF transfer_status THEN
        COMMIT;
        SET message = CONCAT('이체 성공: ', from_account, '에서 ', to_account, '로 ', amount, '원을 이체했습니다.');
    ELSE
        ROLLBACK;
        SET message = '이체 실패: 계좌 정보가 잘못되었거나 잔고가 부족합니다.';
    END IF;
END //
DELIMITER ;

-- 프로시저 호출 (올바른 계좌번호)
SET @result_message = '';
CALL transfer_money('123-456-789', '987-654-321', 1000000.00, @result_message);
SELECT @result_message;